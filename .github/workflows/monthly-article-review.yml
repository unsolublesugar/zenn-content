name: Monthly Article Review

on:
  schedule:
    # 毎月1日の9時（JST）に実行
    - cron: '0 0 1 * *'
  workflow_dispatch:
    # 手動実行も可能
    inputs:
      target_count:
        description: 'レビュー対象記事数'
        required: false
        default: '5'
        type: string

jobs:
  article-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得してgit logを正常動作させる
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install
        
      - name: Find articles for review
        id: find-articles
        run: |
          # 公開記事から古い記事を特定（3ヶ月以上前のファイル）
          target_count="${{ github.event.inputs.target_count || '5' }}"
          
          echo "## 対象記事の特定" >> $GITHUB_STEP_SUMMARY
          
          # published: true の記事を取得し、ファイル更新日時でソート
          articles=$(find articles -name "*.md" -exec grep -l "published: true" {} \; | \
                    xargs ls -lt | \
                    head -n $target_count | \
                    awk '{print $NF}')
          
          echo "review_targets<<EOF" >> $GITHUB_OUTPUT
          echo "$articles" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "対象記事:" >> $GITHUB_STEP_SUMMARY
          echo "$articles" | while read article; do
            if [ -n "$article" ]; then
              title=$(grep "^title:" "$article" | cut -d'"' -f2)
              echo "- $article: $title" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
      - name: Generate review report
        id: review
        run: |
          report_file="review-report-$(date +%Y%m).md"
          current_date="$(date +%Y年%m月)"
          
          cat > "$report_file" << EOF
          # 📊 月次記事レビューレポート - $current_date
          
          自動生成されたレビューレポートです。以下の観点で記事を評価しました：
          
          ## レビュー観点
          - ✅ 情報の古さチェック
          - ✅ 読みやすさスコア
          - ✅ 関連記事提案
          - ✅ SEO改善提案
          
          ## レビュー結果
          
          EOF
          
          # 各記事をレビュー
          echo '${{ steps.find-articles.outputs.review_targets }}' | while read article; do
            if [ -n "$article" ] && [ -f "$article" ]; then
              echo "レビュー中: $article"
              
              # 記事の基本情報を取得
              title=$(grep "^title:" "$article" | cut -d'"' -f2 || echo "タイトル不明")
              topics=$(grep "^topics:" "$article" | cut -d'[' -f2 | cut -d']' -f1 || echo "トピック不明")
              
              # publication_nameとarticle_idを取得してリンクを生成
              # Front Matter内のpublication_nameのみを取得（先頭10行から検索してコメント除外）
              publication_name=$(head -10 "$article" | grep "^publication_name:" | grep -v "#" | cut -d'"' -f2 || echo "")
              article_id=$(basename "$article" .md)
              
              if [ -n "$publication_name" ]; then
                article_url="https://zenn.dev/$publication_name/articles/$article_id"
              else
                article_url="https://zenn.dev/unsoluble_sugar/articles/$article_id"
              fi
              
              # ファイルの最終commit日時を取得（Git logベース）
              file_date=$(git log -1 --format=%ct -- "$article" 2>/dev/null || echo "0")
              current_date=$(date +%s)
              days_old=$(( (current_date - file_date) / 86400 ))
              
              cat >> "$report_file" << EOF
          ### 📄 $title
          
          **記事リンク**: $article_url  
          **ファイル**: \`$article\`  
          **トピック**: $topics  
          **最終更新**: ${days_old}日前  
          
          #### 🔍 情報の古さチェック
          EOF
              
              if [ $days_old -gt 90 ]; then
                cat >> "$report_file" << EOF
          ⚠️ **要更新**: 90日以上更新されていません
          - 最新の技術情報の確認が必要
          - 外部リンクの確認
          - バージョン情報の更新
          EOF
              else
                echo "✅ **最新**: 最近更新されています" >> "$report_file"
              fi
              
              # 記事の詳細分析を実行
              echo "詳細分析中: $article"
              
              # 記事内容を分析（日本語対応の文字数カウント）
              word_count=$(python3 << 'PYTHON_EOF' 2>/dev/null || echo "0"
import re
import sys
try:
    with open("$article", "r", encoding="utf-8") as f:
        content = f.read()
    content = re.sub(r"^---.*?---\n", "", content, flags=re.DOTALL)
    char_count = len(re.sub(r"\s", "", content))
    print(char_count)
except:
    print("0")
PYTHON_EOF
)
              heading_count=$(grep -c "^#" "$article" || echo "0")
              code_block_count=$(grep -c "\`\`\`\|\`" "$article" || echo "0")
              image_count=$(grep -c "!\[" "$article" || echo "0")
              link_count=$(grep -c "http" "$article" || echo "0")
              
              # 技術的な古さの兆候を検出（フラグベース）
              has_old_dates=false
              has_old_versions=false
              has_old_links=false
              
              if grep -q "2020\|2021\|2022" "$article"; then
                has_old_dates=true
              fi
              if grep -qi "windows 10\|node 14\|npm 6" "$article"; then
                has_old_versions=true
              fi
              if grep -qi "http://\|docs.microsoft.com.*powershell" "$article"; then
                has_old_links=true
              fi
              
              # 記事の強みを分析（フラグベース）
              has_rich_images=false
              has_rich_code=false
              has_good_structure=false
              
              if [ $image_count -gt 5 ]; then
                has_rich_images=true
              fi
              if [ $code_block_count -gt 10 ]; then
                has_rich_code=true
              fi
              if [ $heading_count -gt 5 ]; then
                has_good_structure=true
              fi
              
              cat >> "$report_file" << EOF
          
          #### 📊 記事分析
          - **文字数**: ${word_count}文字
          - **見出し数**: ${heading_count}個
          - **コードブロック**: ${code_block_count}個
          - **画像数**: ${image_count}枚
          - **外部リンク**: ${link_count}個
          
          #### 🔍 詳細分析結果
          EOF
          
              # AIレビューコメント生成
              echo "          **🤖 AIレビューコメント**" >> "$report_file"
              
              # 記事の内容から総合評価を算出（簡易版）
              # 基本スコア算出: 構造、コンテンツ、古さを総合評価
              structure_score=3.0
              content_score=3.0 
              freshness_score=3.0
              
              # 構造スコア（見出し数とコードブロック数から）
              if [ $heading_count -gt 10 ]; then
                structure_score=4.5
              elif [ $heading_count -gt 5 ]; then
                structure_score=4.0
              fi
              
              # コンテンツスコア（画像、コード、リンクの豊富さから）
              total_content=$(( image_count + code_block_count + link_count ))
              if [ $total_content -gt 30 ]; then
                content_score=4.5
              elif [ $total_content -gt 15 ]; then
                content_score=4.0
              elif [ $total_content -gt 5 ]; then
                content_score=3.5
              fi
              
              # 新鮮度スコア（最終更新からの経過日数）
              if [ $days_old -lt 90 ]; then
                freshness_score=4.5
              elif [ $days_old -lt 180 ]; then
                freshness_score=4.0
              elif [ $days_old -lt 365 ]; then
                freshness_score=3.5
              else
                freshness_score=2.5
              fi
              
              # 総合スコア算出（Python使用でより確実に）
              total_score_calc=$(python3 << 'PYTHON_EOF' 2>/dev/null || echo "3.5"
import sys
try:
    s1, s2, s3 = $structure_score, $content_score, $freshness_score
    result = round((s1 + s2 + s3) / 3, 1)
    print(f"{result}")
except:
    print("3.5")
PYTHON_EOF
)
              
              # レビューコメント生成
              cat >> "$report_file" << EOF
          
          **総合評価**: ${total_score_calc}/5.0
          
          この記事は技術的な内容を扱った記事として、以下の観点から評価されました：
          
          - **構造性**: ${structure_score}/5.0 - 見出し構造による読みやすさ
          - **コンテンツ**: ${content_score}/5.0 - 画像・コード・リンクの充実度  
          - **新鮮度**: ${freshness_score}/5.0 - 情報の最新性
          
          **記事の特徴**:
          EOF
              
              # 記事タイプ別のコメント
              if [ $code_block_count -gt 15 ]; then
                echo "          - 豊富なコード例により実装手順が具体的に説明されている" >> "$report_file"
              fi
              
              if [ $image_count -gt 10 ]; then
                echo "          - 豊富な画像により視覚的な理解が促進されている" >> "$report_file"
              fi
              
              if [ $heading_count -gt 10 ]; then
                echo "          - 詳細な見出し構造により情報が整理されている" >> "$report_file"
              fi
              
              if [ $days_old -gt 365 ]; then
                echo "          - 情報の更新により価値向上の余地がある" >> "$report_file"
              elif [ $days_old -lt 90 ]; then
                echo "          - 最新の情報が反映された新鮮な内容" >> "$report_file"
              fi
              
              echo "" >> "$report_file"
          
              # 技術的な古さの兆候を出力
              if [ "$has_old_dates" = true ] || [ "$has_old_versions" = true ] || [ "$has_old_links" = true ]; then
                echo "          **⚠️ 技術的な古さの兆候**" >> "$report_file"
                if [ "$has_old_dates" = true ]; then
                  echo "          - 古い日付情報を含む可能性あり" >> "$report_file"
                fi
                if [ "$has_old_versions" = true ]; then
                  echo "          - 古いバージョン情報を含む可能性あり" >> "$report_file"
                fi
                if [ "$has_old_links" = true ]; then
                  echo "          - 更新が必要なリンクを含む可能性あり" >> "$report_file"
                fi
                echo "" >> "$report_file"
              fi
              
              # 記事の強みを出力
              if [ "$has_rich_images" = true ] || [ "$has_rich_code" = true ] || [ "$has_good_structure" = true ]; then
                echo "          **✅ 記事の強み**" >> "$report_file"
                if [ "$has_rich_images" = true ]; then
                  echo "          - 豊富な画像（${image_count}枚）で視覚的に分かりやすい" >> "$report_file"
                fi
                if [ "$has_rich_code" = true ]; then
                  echo "          - 適切なコードブロック使用（${code_block_count}個）" >> "$report_file"
                fi
                if [ "$has_good_structure" = true ]; then
                  echo "          - 構造化された見出し（${heading_count}個）" >> "$report_file"
                fi
                echo "" >> "$report_file"
              fi
              
              cat >> "$report_file" << EOF
          
          #### 📝 具体的改善提案
          EOF
              
              if [ $days_old -gt 365 ]; then
                cat >> "$report_file" << EOF
          **🔄 優先度：高（1年以上経過）**
          - [ ] 最新バージョン情報への更新（OS、ツール、ライブラリ）
          - [ ] 外部リンクの生存確認と最新化
          - [ ] 廃止されたAPI/手法の確認と代替案の提示
          - [ ] セキュリティ関連情報の追加・更新
          EOF
              elif [ $days_old -gt 180 ]; then
                cat >> "$report_file" << EOF
          **🔄 優先度：中（半年以上経過）**
          - [ ] バージョン情報の確認・更新
          - [ ] 外部リンクの確認
          - [ ] 最新のベストプラクティスとの比較
          EOF
              else
                cat >> "$report_file" << EOF
          **🔄 優先度：低（最新）**
          - [ ] 関連記事リンクの追加
          - [ ] SEOキーワードの最適化
          - [ ] 読みやすさの微調整
          EOF
              fi
              
              cat >> "$report_file" << EOF
          
          **📈 品質向上提案**
          - [ ] トラブルシューティングセクションの追加
          - [ ] 実践的な使用例の拡充
          - [ ] 関連技術との比較・連携方法
          - [ ] パフォーマンス最適化のヒント
          
          ---
          
          EOF
            fi
          done
          
          echo "report_file=$report_file" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportFile = '${{ steps.review.outputs.report_file }}';
            
            let reportContent = '';
            try {
              reportContent = fs.readFileSync(reportFile, 'utf8');
            } catch (error) {
              reportContent = '# レビューレポート生成エラー\n\nレポートファイルの読み込みに失敗しました。';
            }
            
            const issueTitle = `📊 月次記事レビューレポート - ${new Date().getFullYear()}年${String(new Date().getMonth() + 1).padStart(2, '0')}月`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: reportContent,
              labels: ['article-review', 'monthly-task', 'enhancement']
            });
            
      - name: Upload review report
        uses: actions/upload-artifact@v4
        with:
          name: monthly-review-report
          path: review-report-*.md
          retention-days: 30